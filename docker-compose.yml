volumes:
  data:

services:
  postgres:
    container_name: 'postgres'
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - ${POSTGRES_LOCAL_PORT}:${POSTGRES_PORT}
    volumes:
      - data:/var/lib/postgresql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", '${POSTGRES_DB}' ]
      interval: 5s
      timeout: 3s
      retries: 5
  
  migrator:
    container_name: 'migrator'
    build:
      context: .
      dockerfile: ./src/server/Migrator/Dockerfile
    environment:
      - ConnectionStrings__Postgres=Host=postgres;Port=${POSTGRES_PORT};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
  
  rabbitmq:
    container_name: 'rabbitmq'
    image: masstransit/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${BROKER_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${BROKER_PASSWORD}
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q status
      interval: 5s
      timeout: 3s
      retries: 5
      
  s3:
    container_name: 's3'
    image: minio/minio
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}
    volumes:
      - ~/s3/data:/data
      
  redis:
    container_name: 'redis'
    image: bitnami/redis
    ports:
      - "6379:6379"
    volumes:
      - ~/redis/data:/bitnami/redis/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
      
  mongo:
    container_name: 'mongo'
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - ~/metadata-db/data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}

  consumer:
    container_name: 'consumer'
    build:
      context: .
      dockerfile: ./src/server/Consumer/Dockerfile
    environment:
      - ConnectionStrings__Postgres=Host=postgres;Port=${POSTGRES_PORT};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB}
      - Broker__Host=rabbitmq
      - Broker__Username=${BROKER_USERNAME}
      - Broker__Password=${BROKER_PASSWORD}
      - Redis__Host=redis
      - Redis__Port=6379
      - Redis__Password=${REDIS_PASSWORD}
      - Mongo__Username=${MONGO_USERNAME}
      - Mongo__Password=${MONGO_PASSWORD}
      - Mongo__Host=mongo
      - Mongo__Port=27017
      - Mongo__Database=${MONGO_DATABASE}
      - AmazonS3__ServiceUrl=http://s3:9000
      - AmazonS3__AccessKey=${S3_ACCESS_KEY}
      - AmazonS3__SecretKey=${S3_SECRET_KEY}
      - AmazonS3__PersistentBucketName=${S3_PERSISTENT_BUCKET_NAME}
      - AmazonS3__TempBucketName=${S3_TEMP_BUCKET_NAME}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
  
  api:
    container_name: 'api'
    build:
      context: .
      dockerfile: ./src/server/Api/Dockerfile
    environment:
      - ConnectionStrings__Postgres=Host=postgres;Port=${POSTGRES_PORT};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB}
      - Broker__Host=rabbitmq
      - Broker__Username=${BROKER_USERNAME}
      - Broker__Password=${BROKER_PASSWORD}
      - AmazonS3__ServiceUrl=http://s3:9000
      - AmazonS3__AccessKey=${S3_ACCESS_KEY}
      - AmazonS3__SecretKey=${S3_SECRET_KEY}
      - AmazonS3__PersistentBucketName=${S3_PERSISTENT_BUCKET_NAME}
      - AmazonS3__TempBucketName=${S3_TEMP_BUCKET_NAME}
      - Frontend__Url=${FRONTEND_URL}
      - Redis__Host=redis
      - Redis__Port=6379
      - Redis__Password=${REDIS_PASSWORD}
      - Mongo__Username=${MONGO_USERNAME}
      - Mongo__Password=${MONGO_PASSWORD}
      - Mongo__Host=mongo
      - Mongo__Port=27017
      - Mongo__Database=${MONGO_DATABASE}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Jwt__Key=${JWT_KEY}
    ports:
      - ${API_HTTP_PORT}:80
      - ${API_HTTPS_PORT}:443
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
  
  frontend:
    container_name: 'frontend'
    build:
      context: ./src/frontend/
      dockerfile: chat/dockerfile
    ports:
      - ${FRONTEND_LOCAL_PORT}:${FRONTEND_DOCKER_PORT}
    volumes:
      - ./src/frontend/chat/src:/app/src

  mvc:
    container_name: mvc
    build:
      dockerfile: ./src/TimMovie/Dockerfile
    ports:
      - '8080:80'
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=${POSTGRES_PORT};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=timmovie
    depends_on:
      - postgres